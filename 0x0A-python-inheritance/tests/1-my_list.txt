=========================
Doctest for 1-my_list.py
=========================


Class MyList that inherits from list

================
Let's execute it
================

It can be instantiated with no arguments, when this condition happens, 
it will return an empty list

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

Or single argument, which must be an iterable object

::

    >>> my_list = MyList([2, 5, 7])
    >>> print(my_list)
    [2, 5, 7]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable


For any more than one instantiation arguments, TypeError
will be raised in that case 

::

    >>> my_list = MyList([3, 5], [3, 7])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)


=============
How to use it 
=============

Class MyList is an inherited from builtin list class,
and thus features the same methods

For instance, let's append() elements to the list

::

    >>> my_list = MyList()
    >>> my_list.append(3)
    >>> my_list.append(4)
    >>> my_list.append(5)
    >>> print(my_list)
    [3, 4, 5]

Replaced with indexing:

::

    >>> my_list[0] = 1
    >>> print(my_list)
    [1, 4, 5]

And removed with the remove() method.

::

    >>> my_list.remove(1)
    >>> print(my_list)
    [4, 5]



=======================
print_sorted Method
=======================

MyList implements a single method - a public instance method
print_sorted(self)

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

TypeError will be raised if an argument is provided,
becuase the method does not take any arguments

::

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

The method prints the list in ascending sorted order.

::

    >>> my_list.append(1)
    >>> my_list.append(3)
    >>> my_list.append(2)
    >>> my_list.append(7)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 3, 2, 7, 5]

::

    >>> my_list.print_sorted()
    [1, 2, 3, 5, 7]

The order of the original list is not affected  
because of the method call

::

    >>> print(my_list)
    [1, 3, 2, 7, 5]

Strings lists are sorted lexographically.

::

    >>> my_list = MyList()
    >>> my_list.append("Biruk")
    >>> my_list.append("Assefa")
    >>> my_list.append("Alx")
    >>> my_list.append("Yabker")
    >>> my_list.append("Baby")
    >>> print(my_list)
    ['Biruk', 'Assefa', 'Alx', 'Yabker', 'Baby']

::

    >>> my_list.print_sorted()
    ['Alx', 'Assefa', 'Baby', 'Biruk', 'Yabker']

Another friendly reminder that the original 
list is unaffected :)

::

    >>> print(my_list)
    ['Biruk', 'Assefa', 'Alx', 'Yabker', 'Baby']

If there is empty list there is nothing to sort

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

TypeError will be raised, If print_sorted() is called on a list of different types 

::

    >>> my_list = MyList([4, "Bruka", "Yabker", 6])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
