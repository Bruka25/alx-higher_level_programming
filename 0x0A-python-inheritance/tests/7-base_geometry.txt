================================
Doctest for Base Geometry module
================================

==================
Let's execute it
==================

This is an example text file in reStructuredText format

First import BaseGeometry from the 7-base_geometry module:

    >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

=============
Let's use it:
=============
    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>


This class should define 2 functions

``area``
    >>> 'area' in dir(BaseGeometry)
    True

``integer_validator``
    >>> 'integer_validator' in dir(BaseGeometry)
    True

Methods test the publicity of the methods

No instance attributes or methods
    >>> dir(bg) == dir(BaseGeometry)
    True

===================
Let's test ``area``
===================

If it's not applied
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

================================
Let's test ``integer_validator``
================================

Two arguments must be provided

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value

    >>> bg.integer_validator(4)
    Traceback (most recent call last):
    TypeError: BaseGeometry.integer_validator() missing 1 required positional arguments: 'value'

    >>> bg.integer_validator(4, 6, 7)
    Traceback (most recent call last):
    TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given


====================
Let's test the type
====================

    >>> bg.integer_validator("name", "Biruk")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer
    
    >>> bg.integer_validator("name", True)
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

    >>> bg.integer_validator("name", 1.55)
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

    >>> bg.integer_validator("name", [3, 2])
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer
     
    >>> bg.integer_validator("name", "Biruk")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer


===============
Let's test sign
===============

    >>> bg.integer_validator("name", -11)
    Traceback (most recent call last):
    ValueError: name must be greater than 0

    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
    ValueError: name must be greater than 0

    >>> bg.integer_validator("name", 3)
